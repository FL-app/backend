name: Friends locator workflow

on:
  push:
    branches-ignore:
      - "main"
      - "develop"
  pull_request:
    branches:
      - "main"
      - "develop"
    types:
      - closed

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-Python@v3
        with:
          python-version: 3.11

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          cd backend
          pip install -r requirements.txt

#      - name: Testing with flake8
#        run: |
#            python -m flake8

  build_and_push_to_docker_hub:
    name: Push image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    if: github.event.pull_request.merged == true && (github.base_ref == 'develop' || github.base_ref == 'main')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD  }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}:backend"
          push: True
          tags: ${{ secrets.DOCKER_USERNAME }}/friends-locator-backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.event.pull_request.merged == true && github.base_ref == 'main'
    steps:
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd /root/infra
            # Checking if old_env exists and creating the old_env directory if it doesn't
            if [ ! -d "old_env" ]; then   mkdir "old_env"; fi
            # Move the ".env" file to the "old_env" directory and rename it with the current date and time stamp.
            mv ".env" "old_env/.env_$(date +"%Y.%m.%d--%H.%M.%S")"
            # Creating and filling a new .env file
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo ELASTICEMAIL_API_KEY=${{ secrets.ELASTICEMAIL_API_KEY }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo LOCALHOST=${{ secrets.LOCALHOST }} >> .env
            echo LOCALHOST_IP=${{ secrets.LOCALHOST_IP }} >> .env
            echo CONTAINER_NAME=${{ secrets.CONTAINER_NAME }} >> .env
            echo DOMAIN=${{ secrets.DOMAIN }} >> .env
            echo SERVER_IP=${{ secrets.SERVER_IP }} >> .env
            echo EVERYONE=${{ secrets.EVERYONE }} >> .env
            echo ACTIVATION_URL=${{ secrets.ACTIVATION_URL }} >> .env
            echo LOGIN_URL_=${{ secrets.LOGIN_URL_ }} >> .env
            
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/friends-locator-backend:latest
            sudo docker-compose stop
            sudo docker-compose rm -f backend
            sudo docker image prune -f
            sudo docker-compose up -d

#  send_message:
#    runs-on: ubuntu-latest
#    needs: deploy
#    if: github.event.pull_request.merged == true && github.base_ref == 'main'
#    steps:
#      - name: Sending message
#        uses: appleboy/telegram-action@master
#        with:
#          to: ${{ secrets.TELEGRAM_TO }}
#          token: ${{ secrets.TELEGRAM_TOKEN }}
#          message: |
#            ${{ github.workflow }}
#            ${{ github.actor }} created commit:
#                        Commit message: ${{ github.event.commits[0].message }}
#
#                        Repository: ${{ github.repository }}
#
#                        See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
